
/* Solution 1: using deque, just the store the indexes to nums, sort the pushing so that the index to the maximum element is always at the front of the queue.
0. Iterate thru the nums vector.
    1. if queue.front() <= idx-k, pop_front()
    2. while cur num is greater than queue.back(), make queue pop_back(), until the queue is empty or its back is greater than the cur num.
    3. then, push the cur num into queue.
    4. if index > k-1, generate output (which the queue.front())
*/
#include <deque>
class Solution1 {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> res;
        for(int i=0 ; i<nums.size(); i++){
            if(!dq.empty() && dq.front() <= i-k)
                dq.pop_front();
            while(!dq.empty() && nums[dq.back()] <= nums[i])
                dq.pop_back();
            dq.push_back(i);

            if(i >= k-1)
                res.push_back(nums[dq.front()]);
        }
        return res;
    }
};

/* Solution 2 : DP, combining left_max and right_max, which travels from different direction and memorize the max with reset every k width */
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> left(n), right(n);

        for(int i=0 ; i<n ; i++){
            if(i%k==0)
                left[i] = nums[i];
            else
                left[i] = max(left[i-1], nums[i]);
        }

        for(int i=n-1 ; i>=0 ; i--){
            if(i%k==0 || i==n-1)
                right[i] = nums[i];
            else
                right[i] = max(right[i+1], nums[i]);
        }

        vector<int> res;
        for(int i=0 ; i<=n-k ; i++){
            res.push_back(max(right[i], left[i+k-1]));
        }
        return res;
    }
};

TEST(Solution, Test1){
    Solution s;
    vector<int> q, exp;
    int k;

    q = {1,3,-1,-3,5,3,6,7};
    exp = {3,3,5,5,6,7};
    k = 3;
    EXPECT_EQ(exp, s.maxSlidingWindow(q, k));

    q = {1};
    exp = {1};
    k = 1;
    EXPECT_EQ(exp, s.maxSlidingWindow(q, k));

    q = {-8651,-5909,7529,-7248,-1894,-1420,-7237,-3995,-9735,-9060,-202,1222,5764,7058,-2547,9315,-2087,3830,9139,-9299,471,-2481,-1008,2773,567,853,-7779,3710,-1183,-7762,-283,-2032,-8152,-5376,3936,1537,-3847,3553,6418,-6923,637,8890,4428,7176,-7356,541,9323,-2760,5029,5996,7207,-9306,602,8998,-6038,-4836,9552,3890,4395,-7196,6417,-1899,-240,9103,4463,-1826,3944,6092,-5049,-4212,9267,3061,-3953,8599,-768,-7159,2055,-7385,726,-242,-617,9069,2586,1519,-7805,-7515,3298,3129,-4642,4999,1762,-6707,-5651,8925,2935,4073,5519,-2966,-1526,-4300,-927,-9875,6595,-8774,-5135,406,-1378,-6097,8165,5562,8595,-7274,-9266,-8532,-1552,3389,6481,-2006,7610,5556,-5050,-1839,1254,8680,7863,-61,4669,1832,9954,-4367,-1162,-2176,-2289,1860,4068,-5923,-2793,-4921,8709,-5956,6587,-9341,1098,5563,-4327,-1281,-9838,-5026,1863,-6394,-1729,4903,3175,-5008,4992,-2413,7748,-2369,3800,-5755,-1562,2746,-4838,8152,9972,-5313,9533,-652,-8099,1529,-7427,6373,-5141,-7954,2757,5873,-2489,5051,5531,5661,9604,4795,-5231,-1649,-2717,-7696,569,-4485,-3390,7144,3239,-5693,-6170,-3125,6887,6462,9646,-5996,1402,7834,-3307,4914,-6652,-6396,-9988,3996,5789,-9870,-4330,610,4470,-3560,-3835,5649,-269,5712,-7561,3163,-1814,-921,3142,-5952,-4970,3423,-4817,6331,8614,-3328,8569,6470,-6501,2147,128,-3869,-144,-3267,-972,5182,-9175,-2597,-1471,-2373,2275,7139,-9805,2119,5817,-3039,-5965,4072,-575,-1030,-6647,540,3982,-4151,-4759,-1717,30,6676,118,-9054,-6192,-7641,-2081,-5697,1224,-4757,-4175,2869,4339,-4230,-1156,-6667,-9952,6389,3730,-6157,-6892,7443,4034,-4430,-7576,-4654,-2663,-9210,9971,-1796,-6393,614,3381,9376,6915,-526,-3813,-1179,6594,-6406,-6807,9402,-3540,-4260,6497,-5000,-7643,-7381,-9781,-351,-5381,5962,8283,1210,7501,-7569,3873,1073,9,5928,8355,-5471,-4887,-5621,-1501,8173,6387,3658,-9871,-7650,-8556,-3831,-105,-2121,-6258,8117,-5173,-6737,-1794,-3340,-8893,-5703,-2478,1256,-9144,-741,2062,4593,-8126,-7209,-9508,-7924,1912,-4902,2490,2739,-9986,-7734,3465,7273,-181,9687,-8103,2189,-3425,-1739,-8288,-8173,3292,2882,-3519,-8479,272,252,-2507,-4142,-4196,4155,-6565,4885,-1028,-8988,-2639,-2017,2349,8381,3950,-5082,-4177,-3872,196,-4411,4576,-5592,3338,-2396,389,-9878,-6846,-3056};
    exp = {9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972,9972};
    k = 361;
    EXPECT_EQ(exp, s.maxSlidingWindow(q, k));
}